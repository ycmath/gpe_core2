"""gpe_core2.encoder.base
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Core encoding entry‑point for GPE **v2‑dev** (CGA‑specialised).

▶ Responsibility
    • Convert arbitrary Python objects (dict / list / scalar …) into a **Generative Payload**
      according to the rule‑pipeline inherited from v1.
    • Integrate *Rule‑Optimizer Hint* (Sprint 1) so that external statistical hints can
      steer the rule selection process.
    • Keep a clear seam where subsequent sprints (vector‑range, streaming, …) plug in.

NOTE
----
This file is derived from the v1 `GPEEncoder.encode()` logic【9†file-4LaSvetfmNRwKN9tSaMfFQ†L66-L89】,
but rewritten as a **functional façade** (stateless helper functions) to minimise
class dependencies.  Heavy subsystems such as `ASTBuilder`, `SeedGenerator`, etc.
will be migrated in separate modules as needed.  Until then they are imported
from the legacy blob (`gpe_core1_compat`) to keep the diff small.
"""
from __future__ import annotations

from dataclasses import asdict
from typing import Any, Mapping

import orjson

# ---- temporary imports from legacy bundle ----------------------------------
# In the next sprint these will move into dedicated sub‑modules inside gpe_core2.
# v2에서는 gpe_core2.ast_builder 를 직접 사용
from gpe_core2.ast_builder import ASTBuilder
from gpe_core2.repetition_detector import RepetitionDetector
from gpe_core2.seed_generator import SeedGenerator
from gpe_core2.models import AttentionSeed, BaseRule, GpePayload

# ---- new modules -----------------------------------------------------------
from gpe_core2.rule_optimizer import select_rules

# ---------------------------------------------------------------------------
__all__ = [
    "encode",
]

# Version tag (payload header)
GPE_V2_DEV = "gpe.v2.dev"


# ---------------------------------------------------------------------------
# Public API
# ---------------------------------------------------------------------------

def encode(data: Any, *, gpe_hints: Mapping[str, Any] | None = None, include_fallback: bool = True) -> GpePayload:  # noqa: D401
    """Encode *data* into a :class:`GpePayload`.

    Parameters
    ----------
    data
        A JSON‑serialisable Python object.
    gpe_hints
        (Optional) Statistical profile generated by GlassBox backend.
        Keys are implementation‑defined; :pyfunc:`gpe_core2.rule_optimizer.select_rules`
        currently uses ``"cardinality"`` and ``"is_vector"``.
    include_fallback
        If *True* a raw JSON fallback copy is embedded for legacy decoders.

    Returns
    -------
    GpePayload
        The payload object containing *generative_payload* and optional *fallback_payload*.
    """

    # 1. Build AST → Seed tree ------------------------------------------------
    builder = ASTBuilder()
    root_id = builder.build(data)

    rep = RepetitionDetector(builder.nodes).detect()
    seeds: list[AttentionSeed] = SeedGenerator(builder.nodes, rep).generate()

    # 2. Flatten seeds into rule list ----------------------------------------
    flat_rules: list[BaseRule] = [r for s in seeds for r in s.rules]

    # 3. Hint‑driven *light* optimisation (Sprint 1) -------------------------
    if gpe_hints:
        flat_rules = _optimise_rules(flat_rules, gpe_hints)

    # 4. Serialise generative payload ----------------------------------------
    gen_payload = {
        "version": GPE_V2_DEV,
        "root_id": root_id,
        "rules": [_serialise_rule(r) for r in flat_rules],
    }

    # 5. Optional JSON fallback ----------------------------------------------
    fb_payload: dict[str, Any] | None = None
    if include_fallback:
        fb_payload = {"json": orjson.dumps(data).decode("utf-8")}

    return GpePayload(
        generative_payload=gen_payload,
        fallback_payload=fb_payload,
        metadata={"cached": False},  # Expressway Hash‑Lane sets this later
    )


# ---------------------------------------------------------------------------
# Internal helpers
# ---------------------------------------------------------------------------

def _optimise_rules(rules: list[BaseRule], hints: Mapping[str, Any]) -> list[BaseRule]:
    """Return *possibly* shorter/more efficient rule list using *hints*.

    Current PoC applies only **constant‑folding** and **range merging**
    decisions.  Future sprints will extend this.
    """

    optimised: list[BaseRule] = []
    for r in rules:
        candidate_ops = select_rules(r, hints)
        # simplistic policy: take the first suggested op if different
        if candidate_ops and candidate_ops[0] != r.opcode:
            r = r._replace(opcode=candidate_ops[0])  # type: ignore
        optimised.append(r)
    return optimised


def _serialise_rule(rule: BaseRule) -> dict[str, Any]:
    """Convert *rule* dataclass → dict for orjson."""
    return asdict(rule)

